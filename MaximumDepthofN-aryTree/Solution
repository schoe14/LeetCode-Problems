import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

/*
  Given a n-ary tree, find its maximum depth.
  The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
 */

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {

    public int maxDepth(Node root) {

       if(root == null) return 0;
       Queue<Node> queue = new LinkedList<>();
       queue.offer(root);

       int maxDepth = 0;
       while (!queue.isEmpty()) {
           int size = queue.size();
           for(int i = 0; i < size; i++) {
               Node current = queue.poll();
               for(Node node : current.children) queue.offer(node);
           }
           maxDepth++;
       }
       return maxDepth;
       
    }
}
