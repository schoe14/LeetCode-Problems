import java.util.ArrayList;

/*
    Assume a BST is defined as follows:
    The left subtree of a node contains only nodes with keys less than the node's key.
    The right subtree of a node contains only nodes with keys greater than the node's key.
    Both the left and right subtrees must also be binary search trees.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {

    public boolean isValidBST(TreeNode root) {
        ArrayList<Integer> list = new ArrayList<>();
        bstHelper(root, list);
        for(int i = 1; i < list.size(); i++) {
            if(list.get(i) <= list.get(i-1)) return false;
        }
        return true;
    }

    public void bstHelper(TreeNode root, ArrayList<Integer> list) {
        if(root == null) return;
        bstHelper(root.left, list);
        list.add(root.val);
        bstHelper(root.right, list);
    }
    
}
